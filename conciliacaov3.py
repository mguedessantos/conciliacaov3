# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12sui2bAaDG7TuKRzS69YBe9sEvPWU0Is
"""

import pandas as pd
import streamlit as st

# Função de pré-processamento e cálculo das somas no CSV
def conciliacao_financeira(arquivo_csv):
    bandeiras_df = pd.read_csv(arquivo_csv, sep=";", encoding="ISO-8859-1")

    bandeiras_df['Valor bruto'] = bandeiras_df['Valor bruto'].replace({r'R\$': '', r'\.': '', ' ': ''}, regex=True)
    bandeiras_df['Valor bruto'] = bandeiras_df['Valor bruto'].str.replace(',', '.', regex=False)
    bandeiras_df['Valor bruto'] = bandeiras_df['Valor bruto'].astype(float)

    bandeiras_df = bandeiras_df[(bandeiras_df['Status'] != 'Recusada') & (bandeiras_df['Status'] != 'Estornada')]

    categorias = [
        ('Visa', 'Crédito', 'Visa Cred'),
        ('Visa', 'Crédito Internacional', 'Visa Cred Int'),
        ('Visa', 'Débito', 'Visa Deb'),
        ('Visa', 'Débito Internacional', 'Visa Deb Int'),
        ('Mastercard', 'Crédito', 'Master Cred'),
        ('Mastercard', 'Crédito International', 'Master Cred Int'),
        ('Maestro', 'Débito', 'Maestro Deb'),
        ('Mastercard', 'Débito Internacional', 'Maestro Deb Int'),
        ('Elo', 'Crédito', 'Elo Cred'),
        ('Elo', 'Débito', 'Elo Deb'),
        ('Amex', 'Crédito', 'Amex Cred'),
        ('Amex', 'Crédito Internacional', 'Amex Cred Int'),
    ]

    somas_csv = {}
    for bandeira, tipo, nome_categoria in categorias:
        soma = bandeiras_df[(bandeiras_df['Bandeira'] == bandeira) & (bandeiras_df['Produto'] == tipo)]['Valor bruto'].sum()
        somas_csv[nome_categoria] = soma

    # Ajustes para somar categorias de Int com normal
    somas_csv['Visa Cred'] += somas_csv.pop('Visa Cred Int', 0)
    somas_csv['Visa Deb'] += somas_csv.pop('Visa Deb Int', 0)
    somas_csv['Master Cred'] += somas_csv.pop('Master Cred Int', 0)
    somas_csv['Maestro Deb'] += somas_csv.pop('Maestro Deb Int', 0)
    somas_csv['Amex Cred'] += somas_csv.pop('Amex Cred Int', 0)

    return somas_csv

# Função para extrair os valores da planilha Excel
def extrair_dados_excel(df):
    valores_extraidos = {}

    keywords = [
        ("Bin Visa Cred", "Visa Cred"),
        ("Bin Visa Deb", "Visa Deb"),
        ("Bin Master Cred", "Master Cred"),
        ("Bin Maestro Deb", "Maestro Deb"),
        ("Bin Elo Cred", "Elo Cred"),
        ("Bin Elo Deb", "Elo Deb"),
        ("Bin Amex", "Amex Cred"),
        ("B2B Master Credito", "B2B Master Credito"),
    ]

    for keyword, label in keywords:
        linha_index = df[df.apply(lambda row: row.astype(str).str.contains(keyword, case=False).any(), axis=1)].index
        if len(linha_index) > 0:
            linha_index = linha_index[0]
            dados_abaixo = df.iloc[linha_index + 1:]
            sub_total_index = dados_abaixo[dados_abaixo.apply(lambda row: row.astype(str).str.contains("SUB-TOTAL TIPO:", case=False).any(), axis=1)].index
            if len(sub_total_index) > 0:
                sub_total_index = sub_total_index[0]
                valor = df.iloc[sub_total_index]["Unnamed: 19"]
                valores_extraidos[label] = valor

    return valores_extraidos

# Função principal para a interface do Streamlit
def main():
    st.title('Conciliação Financeira')

    # Upload dos arquivos Excel e CSV
    excel_file = st.file_uploader("Envie o arquivo Excel", type=['xlsx', 'xls'])
    csv_file = st.file_uploader("Envie o arquivo CSV", type=['csv'])

    if excel_file and csv_file:
        try:
            # Carregar o arquivo Excel
            df = pd.read_excel(excel_file)

            # Extração dos dados do Excel
            valores_excel = extrair_dados_excel(df)

            # Processar o arquivo CSV
            somas_csv = conciliacao_financeira(csv_file)

            # Forçar mostrar B2B Master Credito, mesmo se não tiver no CSV
            if 'B2B Master Credito' not in somas_csv:
                somas_csv['B2B Master Credito'] = 0.0

            # Mostrar os resultados na interface
            st.subheader('Resultados da Comparação')

            for label in valores_excel:
                if label in somas_csv:
                    valor_excel = float(valores_excel[label])
                    valor_csv = float(somas_csv[label])
                    soma_total = valor_excel + valor_csv

                    if round(soma_total, 2) != 0:
                        st.markdown(f"{label}: Sistema = **R${valor_excel:,.2f}** | Bin = **R${valor_csv:,.2f}** | Soma Total = <span style='background-color: red; color: white;'>R${soma_total:,.2f}</span>", unsafe_allow_html=True)
                    else:
                        st.markdown(f"{label}: Sistema = **R${valor_excel:,.2f}** | Bin = **R${valor_csv:,.2f}** | Soma Total = R${soma_total:,.2f}")
                else:
                    st.markdown(f"{label} não encontrado no CSV.")
        except Exception as e:
            st.error(f"Ocorreu um erro ao processar os arquivos: {e}")

if __name__ == "__main__":
    main()